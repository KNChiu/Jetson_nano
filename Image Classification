2019/08/26

# AI and Deep Learning

// Machine Learning (機器學習)
  A branch of AI to generalize and classify images based on experience in the form of lots of example data.
  「透過從過往的資料和經驗中學習並找到其運行規則，最後達到人工智慧的方法。」
  
  資料 -> 得到函數 -> (學習) -> 規則 -> 預測
  
// Deep Learning (深度學習)
  A Technique for Implementing Machine Learning
  「一種實現機器學習的技術。」

  https://blog.gcp.expert/ml-1-ai-ml-deep-learning-intro/
  
# Deep Learning Models
  A Deep Learning model consists of a neural network with internal parameters. 
  
// weights (權重)
  表徵不同單元之間連接的強度
  Before training, the model cannot accurately determine the correct class from an image input, because the weights are wrong.
  
  https://medium.com/@baubibi/%E9%80%9F%E8%A8%98ai%E8%AA%B2%E7%A8%8B-%E6%B7%B1%E5%BA%A6%E5%AD%B8%E7%BF%92%E5%85%A5%E9%96%80-%E4%B8%80-68e27912ce30
  https://bigdatafinance.tw/index.php/tech/methodology/472-2017-11-08-06-54-27
  
# Convolutional Neural Networks (CNN) (卷积神经网络)
  Deep learning relies on Convolutional Neural Network (CNN) models to transform images into predicted classifications.
  And is the preferred network for image applications.
  
# Artificial Neural Network (人工神經網路)
  The network transforms input data by applying a nonlinear function to a weighted sum of the inputs.
  The intermediate outputs of one layer, called features, are used as the input into the next layer. 
  The neural network, through repeated transformations, learns multiple layers of nonlinear features (like edges and shapes), 
  which it then combines in a final layer to create a prediction (of more complex objects). 
  
# Convolutions (卷積)
  https://www.zhihu.com/question/22298352
  
# Transfer Learning (轉移學習)
  https://medium.com/%E6%88%91%E5%B0%B1%E5%95%8F%E4%B8%80%E5%8F%A5-%E6%80%8E%E9%BA%BC%E5%AF%AB/transfer-learning-%E8%BD%89%E7%A7%BB%E5%AD%B8%E7%BF%92-4538e6e2ffe4
  
# Thumbs Project (應用)
  //Open Terminal jupyter lab
    nvdli-nano -> classification -> classification_interactive.ipynb
    
  //Camera (CSICamera or USBCamera)
    *There can only be one instance of CSICamera or USBCamera at a time.
  -----------------------------------------------
    # Full reset of the camera
    !echo 'dlinano' | sudo -S systemctl restart nvargus-daemon && printf '\n'
    
    # Check device number
    !ls -ltrh /dev/video*

    # USB Camera (Logitech C270 webcam)
    from jetcam.usb_camera import USBCamera
    camera = USBCamera(width=224, height=224, capture_device=0) # capture_device=0 USB port
  -----------------------------------------------
2019/08/27

  //Task
    Define TASK and CATEGORIES parameters ,in this project it's already been defined,
    so just define your project TASK and what CATEGORIES of data you will collect. 
  -----------------------------------------------
    import torchvision.transforms as transforms
    from dataset import ImageClassificationDataset
    
    # set task name 
    TASK = 'thumbs'
    
    # what categories we need
    CATEGORIES = ['thumbs_up', 'thumbs_down']

    DATASETS = ['A', 'B']
    
    TRANSFORMS = transforms.Compose([    # 用於把一系列變換組合到一起。
    
        # transforms.ColorJitter(brightness=0, contrast=0, saturation=0, hue=0) 修改亮度、對比度和飽和度
        transforms.ColorJitter(0.2, 0.2, 0.2, 0.2), 
        
        # transforms.Resize(size, interpolation=2) 重置影象解析度
        transforms.Resize((224, 224)),
        
        transforms.ToTensor(),
        
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ])

    datasets = {}
    for name in DATASETS:
        datasets[name] = ImageClassificationDataset(TASK + '_' + name, CATEGORIES, TRANSFORMS)

    print("{} task with {} categories defined".format(TASK, CATEGORIES))
    
    # https://www.itread01.com/content/1546227125.html
  -----------------------------------------------
  
  
  

  
